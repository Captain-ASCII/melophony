diff --git a/App/public/css/Card.css b/App/public/css/Card.css
new file mode 100644
index 0000000..e9cc55d
--- /dev/null
+++ b/App/public/css/Card.css
@@ -0,0 +1,32 @@
+
+.cardContainer {
+  box-shadow: 2px 5px 10px rgba(0, 0, 0, 0.34);
+  margin: 20px 0;
+  border-radius: 10px;
+  overflow: hidden;
+}
+
+.cardHeader {
+  padding: 10px;
+  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.12);
+}
+
+.cardFooter {
+  padding: 10px;
+  box-shadow: 0 -5px 5px rgba(0, 0, 0, 0.12);
+}
+
+.cardActions {
+  display: flex;
+  justify-content: flex-end;
+}
+
+.cardContent {
+  height: 200px;
+  overflow-x: hidden;
+  overflow-y: scroll;
+}
+
+.cardListItem:hover {
+  background-color: var(--main-hover-bg);
+}
\ No newline at end of file
diff --git a/App/src/components/Card.tsx b/App/src/components/Card.tsx
new file mode 100644
index 0000000..be687f9
--- /dev/null
+++ b/App/src/components/Card.tsx
@@ -0,0 +1,30 @@
+import React from 'react'
+
+interface CardProps {
+  children: Array<JSX.Element>;
+  header: JSX.Element;
+  footer: JSX.Element;
+}
+
+const Card = <T extends unknown>({children, header, footer}: CardProps): JSX.Element => {
+
+  return (
+    <div className="cardContainer" >
+      { header && 
+        <div className="cardHeader">
+          { header }
+        </div>
+      }
+      <div className="cardContent" >
+        { children }
+      </div>
+      { footer && 
+          <div className="cardFooter" >
+          { footer }
+        </div>
+      }
+    </div>
+  )
+}
+
+export default Card
\ No newline at end of file
diff --git a/App/src/components/ClickableTextInput.tsx b/App/src/components/ClickableTextInput.tsx
new file mode 100644
index 0000000..199f117
--- /dev/null
+++ b/App/src/components/ClickableTextInput.tsx
@@ -0,0 +1,47 @@
+import React, { useCallback, useState } from 'react'
+
+import TextInput from '@components/TextInput'
+import IconButton from './IconButton'
+
+enum InputMode {
+  TEXT,
+  INPUT
+}
+
+const ClickableTextInput = ({ initialValue, onInput, textClassName }:
+{ initialValue: string; onInput?: (t: string) => void; textClassName?: string }): JSX.Element => {
+
+  const [ value, setValue ] = useState(initialValue)
+  const [ inputMode, setInputMode ] = useState(InputMode.TEXT)
+
+  const input = useCallback(text => {
+    setValue(text)
+    if (onInput) {
+      onInput(text)
+    }
+  }, [ onInput ])
+
+  const handleInput = useCallback(value => input(value), [ input ])
+  const handleInputModeChange = useCallback(() => setInputMode(InputMode.INPUT), [ setInputMode ])
+  const validate = useCallback((d, event: React.MouseEvent) => {
+    event.stopPropagation()
+    if (value === '') {
+      setValue('default')
+    }
+    setInputMode(InputMode.TEXT)
+  }, [ setInputMode ])
+
+  return (
+    <div onClick={handleInputModeChange} >
+      { inputMode === InputMode.INPUT ?
+        <div className="clickableTextInput" >
+          <TextInput initialValue={initialValue} onInput={handleInput} />
+          <IconButton icon="check" onClick={validate} />
+        </div> :
+        <p className={textClassName} >{ value }</p>
+      }
+    </div>
+  )
+}
+
+export default ClickableTextInput
\ No newline at end of file
